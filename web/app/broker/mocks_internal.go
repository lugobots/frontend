// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lugobots/frontend/web/app/broker (interfaces: HitsCounter)

// Package broker is a generated GoMock package.
package broker

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHitsCounter is a mock of HitsCounter interface.
type MockHitsCounter struct {
	ctrl     *gomock.Controller
	recorder *MockHitsCounterMockRecorder
}

// MockHitsCounterMockRecorder is the mock recorder for MockHitsCounter.
type MockHitsCounterMockRecorder struct {
	mock *MockHitsCounter
}

// NewMockHitsCounter creates a new mock instance.
func NewMockHitsCounter(ctrl *gomock.Controller) *MockHitsCounter {
	mock := &MockHitsCounter{ctrl: ctrl}
	mock.recorder = &MockHitsCounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHitsCounter) EXPECT() *MockHitsCounterMockRecorder {
	return m.recorder
}

// Hits mocks base method.
func (m *MockHitsCounter) Hits() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hits")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Hits indicates an expected call of Hits.
func (mr *MockHitsCounterMockRecorder) Hits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hits", reflect.TypeOf((*MockHitsCounter)(nil).Hits))
}

// Incr mocks base method.
func (m *MockHitsCounter) Incr(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Incr", arg0)
}

// Incr indicates an expected call of Incr.
func (mr *MockHitsCounterMockRecorder) Incr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockHitsCounter)(nil).Incr), arg0)
}
