/* #region -- Variáveis    */
    $breakpoint-xx: 1700px;
    $breakpoint-xg: 1500px;
    $breakpoint-xl: 1200px;
    $breakpoint-l: 992px;
    $breakpoint-m: 768px;
    $breakpoint-s: 576px;
    $breakpoint-xs: 384px;
 

    $map_breakpoint: () !default;
    $map_breakpoint: map-merge((
        "xx": $breakpoint-xx,
        "xg": $breakpoint-xg,
        "xl": $breakpoint-xl,
        "l": $breakpoint-l,
        "m": $breakpoint-m,
        "s": $breakpoint-s,
        "xs": $breakpoint-xs),
        $map_breakpoint);

    $columns:   12 !default;
    $gutter:    30 !default;
    $space:     40 !default;
    $area:      1300 !default;
    $total-area:$area + $gutter;

/* #endregion -- Variáveis  */


/* #region -- Mixins    */
    // Faz o cálculo dem relação ao gutter e define os valor em padding ou margin sempre pra left ou right
    @mixin gutter_operation($operation,$value,$atribute,$negative_or_positive, $unit) {     
        @if $negative_or_positive==negative {         
            @if $operation==multiplie {
                #{$atribute}-left: -$gutter * $value + $unit;
                #{$atribute}-right: -$gutter * $value + $unit;
            }
            @if $operation==divide {
                #{$atribute}-left: -$gutter / $value + $unit;
                #{$atribute}-right: -$gutter / $value + $unit;
            }
            @if $operation==addition {
                #{$atribute}-left: -$gutter + $value + $unit;
                #{$atribute}-right: -$gutter + $value + $unit;
            }
            @if $operation==subtract {
                #{$atribute}-left: -$gutter - $value + $unit;
                #{$atribute}-right: -$gutter - $value + $unit;
            }
        }
        @if $negative_or_positive==positive {         
            @if $operation==multiplie {
                #{$atribute}-left: $gutter * $value + $unit;
                #{$atribute}-right: $gutter * $value + $unit;
            }
            @if $operation==divide {
                #{$atribute}-left: $gutter / $value + $unit;
                #{$atribute}-right: $gutter / $value + $unit;
            }
            @if $operation==addition {
                #{$atribute}-left: $gutter + $value + $unit;
                #{$atribute}-right: $gutter + $value + $unit;
            }
            @if $operation==subtract {
                #{$atribute}-left: $gutter - $value + $unit;
                #{$atribute}-right: $gutter - $value + $unit;
            }
        }
    }
    // Mixin de clearfix
    @mixin clearfix { &::after, &::before { content: ''; display: table; clear: both; }}
/* #endregion -- Mixins */

/* #region -- Placeholders de tamanho    */

    @mixin model-full($side: all, $max: false, $min: false, $value:100%){
        @if $side == all{
            width: #{$value};
            height: #{$value};
            @if $max != false{
                max-width: 100%;  max-height: 100%;
            }
            @if $min != false{
                min-width: 100%; min-height: 100%;
            }
        }
        @if $side == width{
            width: #{$value};
            @if $max != false{ max-width: 100%; }
            @if $min != false{ min-width: 100%;}
        }
        @if $side == height{
            height: #{$value};
            @if $max != false{ max-height: 100%; }
            @if $min != false{ min-height: 100%; }
        }
    }
    
/* #endregion -- Placeholders de tamanho  */

/* #region -- Containers    */

    @mixin container-area{ max-width: #{$total-area + px}; }

    @mixin model-container{
        position: relative;
        max-width: 100%;
         margin-left: auto;
         margin-right: auto;
         display: flex;
         flex-flow: row wrap;        
    }
    @mixin container{
        @include model-container;
        @include container-area;
    }

/* #endregion -- Containers  */ 

%row { @include gutter_operation(divide,2,margin,negative,px);}
%gutter { @include gutter_operation(divide, 2, padding,positive,px);}
%no-gutter {  padding-right: 0px !important; padding-left: 0px !important; }

/* #region -- Media Queries - Breakpoints para estilização  */
@mixin breakpoint($size) { 
    @if $size==au { @media screen and (max-width: #{$total-area - 1 + px }){ @content; }}
    @else if $size== xx { @media screen and (min-width: #{map-get($map_breakpoint,'xx')}){ @content; }}
    @else if $size== xg { @media screen and (max-width: #{map-get($map_breakpoint,'xx')-1}){ @content; }}
    @else if $size== xl { @media screen and (max-width: #{map-get($map_breakpoint,'xg')-1}){ @content; }}
    @else if $size==l { @media screen and (max-width: #{map-get( $map_breakpoint, 'xl')-1}){ @content; }}
    @else if $size==m { @media screen and (max-width: #{map-get($map_breakpoint,'l')-1}){ @content; }}
    @else if $size==s { @media screen and (max-width: #{map-get($map_breakpoint,'m')-1}){ @content; }}
    @else if $size==xs { @media screen and (max-width: #{map-get($map_breakpoint,'s')-1}){ @content; }}
    @else if $size==ie { @media screen and (-ms-high-contrast: active),(-ms-high-contrast: none){ @content; }}
    @else {  @media screen and (max-width: #{$size + px}) { @content; }}
}

/* #endregion -- Media Queries - Breakpoints  */
/* #region -- Grid dentro das medias queries - retorna apenas o valor do width    */
    @function grid($col) { 
        $width: $col / $columns * 100 * 1%;
        $result: calc(#{$width});
        @return $result; 
    }

/* #endregion -- Grid dentro das medias queries - retorna apenas o valor do width  */
/* #region -- Placeholders com o tamanho das colunas  */
    %model-col { 
        min-height: 1px;
        position: relative;
        @include gutter_operation(divide,2,padding,positive,px);

        @include breakpoint(xs) {     
            width: 100% !important;
            margin-right: auto;
            margin-left: auto;
        }
    }

// Mixin pra pegar definir o tamanho da coluna e inserir ás formatações padrões.
    @mixin grid_placeholder($col, $columns) { width: $col / $columns * 100 * 1%; @extend %model-col; }
    
    %col-auto { 
        @extend %model-col;
        max-width: 100%;
        flex: 1 0 0;
    }
    %col-1 { @include grid_placeholder(1, $columns);}
    %col-2 { @include grid_placeholder(2, $columns);}
    %col-3 { @include grid_placeholder(3, $columns);}
    %col-4 { @include grid_placeholder(4, $columns);}
    %col-5 { @include grid_placeholder(5, $columns);}
    %col-6 { @include grid_placeholder(6, $columns);}
    %col-7 { @include grid_placeholder(7, $columns);}
    %col-8 { @include grid_placeholder(8, $columns);}
    %col-9 { @include grid_placeholder(9, $columns);}
    %col-10 { @include grid_placeholder(10, $columns);}
    %col-11 { @include grid_placeholder(11, $columns);}
    %col-12 { @include grid_placeholder(12, $columns);}
    %col-13 { @include grid_placeholder(13, $columns);}
    %col-14 { @include grid_placeholder(14, $columns);}
    %col-15 { @include grid_placeholder(15, $columns);}
    %col-16 { @include grid_placeholder(16, $columns);}
/* #endregion -- Placeholders com o tamanho das colunas */


// Classes

.container{
    @include container;
}  